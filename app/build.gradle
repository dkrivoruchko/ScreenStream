plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "org.jetbrains.kotlin.plugin.parcelize"
    id "com.google.gms.google-services"
    id "com.google.firebase.crashlytics"
}

android {
    namespace "info.dvkr.screenstream"
    ndkVersion("25.2.9519653")

    apply from: rootProject.file("signing.gradle")

    defaultConfig {
        applicationId = "info.dvkr.screenstream"
        minSdkVersion(23)
        targetSdkVersion(33)
        versionCode = 40000
        versionName = "4.0.0"

        // Don't forget to update xml/locales_config.xml
        resourceConfigurations += ['en', 'ar', 'ca', 'de', 'es', 'fa', 'fr-rFR', 'gl', 'hi', 'it', 'ja', 'nl', 'pl', 'pt-rBR', 'ru', 'sk', 'uk', 'zh', 'zh-rTW']

        // https://medium.com/@crafty/no-if-you-do-that-then-you-cant-use-newer-features-on-older-platforms-e-g-fa595333c0a4
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    Properties localProps = new Properties()
    File localProperties = new File(rootProject.rootDir, "local.properties")
    if (localProperties.exists() && localProperties.isFile()) {
        localProperties.withInputStream { localProps.load(it) }
    }

    buildTypes {
        getByName("debug") {
            signingConfig signingConfigs.debugsign
            applicationIdSuffix ".dev"
            minifyEnabled = false
            shrinkResources = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            buildConfigField "String", "SIGNALING_SERVER", localProps.getProperty("SIGNALING_SERVER_DEV", "")
            buildConfigField "String", "CLOUD_PROJECT_NUMBER", localProps.getProperty("CLOUD_PROJECT_NUMBER_DEV", "")
        }
        getByName("release") {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            buildConfigField "String", "SIGNALING_SERVER", localProps.getProperty("SIGNALING_SERVER_RELEASE", "")
            buildConfigField "String", "CLOUD_PROJECT_NUMBER", localProps.getProperty("CLOUD_PROJECT_NUMBER_RELEASE", "")
            packagingOptions {
                exclude("DebugProbesKt.bin")
            }
        }
    }

    flavorDimensions("default")
    productFlavors {
        create("firebase") {
            manifestPlaceholders = ["adMobPubId": "${localProps.getProperty("ad.pubId")}"]
            buildConfigField "String", "AD_UNIT_ID_A", localProps.getProperty("ad.unitIdA", "")
            buildConfigField "String", "AD_UNIT_ID_B", localProps.getProperty("ad.unitIdB", "")
            buildConfigField "String", "AD_UNIT_ID_C", localProps.getProperty("ad.unitIdC", "")
        }
        create("firebasefree") {
            manifestPlaceholders = ["adMobPubId": ""]
            firebaseCrashlytics.mappingFileUploadEnabled = false
        }
    }

    buildFeatures {
        viewBinding = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"

        firebase.java.srcDirs += "src/firebase/kotlin"
        firebaseDebug.java.srcDirs += "src/firebaseDebug/kotlin"
        firebaseRelease.java.srcDirs += "src/firebaseRelease/kotlin"

        firebasefree.java.srcDirs += "src/firebasefree/kotlin"
        firebasefreeDebug.java.srcDirs += "src/firebasefreeDebug/kotlin"
        firebasefreeRelease.java.srcDirs += "src/firebasefreeRelease/kotlin"
    }

    packagingOptions {
        resources {
            excludes += ["META-INF/INDEX.LIST"]
        }
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
        languageVersion = "1.9"
    }
}

dependencies {
    coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.3")

    implementation(project(":common"))
    implementation(project(":mjpeg"))
    implementation(project(":webrtc"))

    implementation("androidx.core:core-ktx:1.10.1")
    implementation('androidx.activity:activity-ktx:1.7.2')
    implementation("androidx.fragment:fragment-ktx:1.6.1")
    implementation("androidx.appcompat:appcompat:1.6.1")
    implementation("androidx.constraintlayout:constraintlayout:2.1.4")
    implementation("androidx.recyclerview:recyclerview:1.3.0")
    implementation("com.google.android.material:material:1.9.0")
    implementation("androidx.window:window:1.1.0")

    implementation("androidx.navigation:navigation-fragment-ktx:2.6.0")
    implementation("androidx.navigation:navigation-ui-ktx:2.6.0")

    implementation("com.afollestad.material-dialogs:core:3.3.0")
    implementation("com.afollestad.material-dialogs:color:3.3.0")
    implementation("com.afollestad.material-dialogs:input:3.3.0")
    implementation("com.afollestad.material-dialogs:lifecycle:3.3.0")
    // Temp fix for https://github.com/afollestad/material-dialogs/issues/1825
    implementation(fileTree("libs/bottomsheets-release.aar"))
//    implementation("com.afollestad.material-dialogs:bottomsheets:3.3.0")

    implementation('io.insert-koin:koin-android:3.4.3')

    firebaseImplementation("com.google.android.gms:play-services-basement:18.2.0")
    firebaseImplementation("com.google.android.play:app-update-ktx:2.1.0")
    firebaseImplementation("com.google.firebase:firebase-analytics:21.3.0")
    firebaseImplementation("com.google.firebase:firebase-crashlytics:18.4.0")
    firebaseImplementation("com.google.android.gms:play-services-ads:22.2.0")

//    debugImplementation("com.squareup.leakcanary:leakcanary-android:2.12")
}

project.tasks.configureEach {
    if (name.startsWith("injectCrashlyticsMappingFileIdFirebasefree")) enabled = false
    if (name.startsWith("processFirebasefree") && name.endsWith("GoogleServices")) enabled = false
}